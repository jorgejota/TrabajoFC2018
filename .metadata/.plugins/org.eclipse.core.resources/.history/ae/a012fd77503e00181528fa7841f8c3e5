package alandb;

import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.apache.xpath.compiler.Keywords;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;

public class Application {
	public static Integer numero = 0;
	public static List<Integer> aDesargar = new ArrayList<Integer>();

	public static void main(String[] args) {
		List<ModelToSave> nuevas = new ArrayList<ModelToSave>();
		String url = "http://alandb.darksky.org/";
		WebDriver driver = new HtmlUnitDriver();
		//WebDriver driver = new FirefoxDriver();
		driver.get(url);
		String palabraBuscar = "contamination";
		driver.findElement(By.id("quickSearchName")).sendKeys(palabraBuscar);
		driver.findElement(By.xpath("//div[@id='querySubmit']//input[@type='submit']")).click();
		while(true) {
			List<String> uris = newURI(driver);
			url = driver.getCurrentUrl();
			extract(uris, driver);
			driver.get(url);
			avanzar(driver);
		}
	}
	public static List<String> newURI(WebDriver driver) {
		List<WebElement> elementos = driver.findElements(By.cssSelector("a[href^=\"show.php?record=\"]"));
		List<String> uris = new ArrayList<String>();
		for(WebElement e: elementos) {
			uris.add(e.getAttribute("href"));
		}
		return uris;
	}
	public static void extract(List<String> uris, WebDriver driver){
		for(String s: uris) {
			driver.get(s);
			ModelToSave meter = new ModelToSave();
			meter.titulo = driver.findElement(By.cssSelector("td[class='mainfieldsbg'][colspan='3']")).getText();
			meter.abstractText = driver.findElement(By.cssSelector("td[class='otherfieldsbg'][colspan='5']")).getText();
			meter.year = Integer.parseInt(driver.findElement(By.cssSelector("a[href^=\"show.php?year=\"]")).getText());
			meter.author = driver.findElement(By.cssSelector("td[class='mainfieldsbg'][colspan='5']")).getText().split(";");
			meter.keywords = driver.findElement(By.cssSelector("td[class='otherfieldsbg'][colspan='5']")).getText().split(";");
			//driver.findElement(By.xpath("//div[@id='querySubmit']//input[@type='submit']")).click();
			driver.findElement(By.xpath("//td[@rowspan='2'][@valign='top']//a")).click();
			tryExtract(driver);
		}
	}
	public static void avanzar(WebDriver driver){
		try {
			driver.findElement(By.xpath("//a[contains(@title,'display next results page')]")).click();
		}
		catch (org.openqa.selenium.NoSuchElementException e) {
			System.out.println("Fin de las busquedas");
			System.exit(0);
		}
	}
	public static void tryExtract(WebDriver driver) {
		//Vamos a meter el Delay para sitios con "Click here if your browser ..."
		dormirse();
		List<WebElement> nuevo = new ArrayList<WebElement>();
		try {
			nuevo = driver.findElements(By.xpath("//a[contains(@href, 'pdf')]"));
			for (WebElement webElement : nuevo) {
				String uri = webElement.getAttribute("href");
				System.out.println("Hemos obtenido el link: " + uri);
				hacerPeticion(uri);
			}	
		}
		//Bloque para hacer click
		catch (org.openqa.selenium.NoSuchElementException e) {
			System.out.println("Puede que haya un boton vamos a ver");
			//Creo que no lanza excepcion, solo una lista vacia
			List<WebElement> listElementClass = driver.findElements(By.xpath("//a[contains(@class, 'pdf')]"));
			List<WebElement> listElementTittle = driver.findElements(By.xpath("//a[contains(@tittle, 'pdf')]"));
			if(!change(driver,listElementClass))
				change(driver,listElementTittle);
		}
		//Nuevo bloque donde hacer click -> Invalid URI
		/*catch (org.openqa.selenium.WebDriverException e) {
			nuevo.click();
			String uriPdf = driver.getCurrentUrl();
			hacerPeticion(uriPdf);
		}*/
		//Opcion para debuguear
		catch (Exception e) {
			System.out.println("Hay que tratar esta excepcion");
			System.exit(0);
		}
	}

	public static boolean change(WebDriver driver, List<WebElement> lista) {
		boolean descargado = false;
		String currentURI = driver.getCurrentUrl();
		for (WebElement webElement : lista) {
			webElement.click();
			//Para dejar que cargue la pagina
			dormirse();
			Set<String> winHandleBefore = driver.getWindowHandles();
			if(winHandleBefore.size() > 1) {
				String[] arrayString = winHandleBefore.toArray(new String[winHandleBefore.size()]);
				driver.switchTo().window(arrayString[arrayString.length-1]);
				String urii = driver.getCurrentUrl();
				descargado = hacerPeticion(urii);
				driver.close();
				driver.switchTo().window(arrayString[0]);
			}
			else {
				String urii = driver.getCurrentUrl();
				descargado = hacerPeticion(urii);
			}
			if(descargado)
				break;
		}
		return descargado;
	}
	
	public static boolean hacerPeticion(String urlString) {
		if(!esPdf(urlString))
			return false;
		URL url;
		try {
			url = new URL(urlString);
			InputStream in = url.openStream();
			Files.copy(in, Paths.get("DownloadPdf/Descargas" + numero + ".pdf"), StandardCopyOption.REPLACE_EXISTING);
			numero++;
			in.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(0);
		}
		return true;
	}
	
	public static boolean esPdf(String urlString) {
		URL url;
		URLConnection u;
		try {
			url = new URL(urlString);
			u = url.openConnection();
			if(urlString == null || urlString.isEmpty() ||
					!u.getHeaderField("Content-Type").equals("application/pdf")){
				System.out.println("No se lo que me has pasado ... : " + urlString);
				return false;
			}
		} catch (IOException e) {
			return false;
		}
		return true;
	}
	
	public static void dormirse() {
		try {
			Thread.sleep(5000);
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}
}
